#import some library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# upload the dataset & delete useful column (records of the date the answer was submitted)
dataset = pd.read_excel(r"C:\Users\loren\OneDrive\Desktop\progetto_data\Survey.xlsx")
dataset = dataset.drop(columns = dataset.columns[0])
df= dataset.drop(columns = dataset.columns[0])
dataset

#split the data in train and test
from sklearn.model_selection import train_test_split
training_data, testing_data = train_test_split(dataset, test_size=0.2, random_state=0)

#separating dependent and independent variables in train and test data
train_x = training_data.drop(columns=['Genre'],axis=1)
train_y = training_data['Genre']

test_x = testing_data.drop(columns=['Genre'],axis=1)
test_y = testing_data['Genre']

#Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
train_x = sc.fit_transform(train_x)
test_x = sc.transform(test_x)

# Fitting K-NN to the Training set and train it
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski', p = 2)
model.fit(train_x, train_y)

# Predicting the Test and Train sets results
from sklearn.metrics import accuracy_score
train_pred = model.predict(train_x)
test_pred = model.predict(test_x)

# Accuracy Score 
accuracy_train = accuracy_score(train_y,train_pred )
print("Accuracy of the model with the train data: ", accuracy_train)

accuracy_test = accuracy_score(test_y,test_pred)
print("Accuracy of the model with the test data: ", accuracy_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(test_y, test_pred)
cm

#chek of accuracy for optimal K-value
error_rate = []
for i in range(1, 50):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(train_x, train_y)
    pred_i = knn.predict(test_x)
    error_rate.append(np.mean(pred_i != test_y))
acc = []

from sklearn import metrics

for i in range(1, 50):
    neigh = KNeighborsClassifier(n_neighbors=i).fit(train_x, train_y)
    yhat = neigh.predict(test_x)
    acc.append(metrics.accuracy_score(test_y, yhat))

plt.figure(figsize=(6, 4))
plt.plot(range(1, 50), error_rate, color='red', linestyle='dashed',
         marker='o', markerfacecolor='black', markersize=10)
plt.title('Error Rate vs. KValue')
plt.xlabel('K')
plt.ylabel('Error Rate')

plt.figure(figsize=(6, 4))
plt.plot(range(1, 50), acc, color='blue', linestyle='dashed',
         marker='o', markerfacecolor='red', markersize=10)
plt.title('accuracy vs. K Value')
plt.xlabel('K')
plt.ylabel('Accuracy')

plt.show()
